// #!/usr/bin/env node

// /**
//  * Module dependencies.
//  */
// let dotenv = require("dotenv");
// dotenv.config({ path: "./config.env" });
// let mongoose = require("mongoose");
// let app = require("./app");
// let debug = require("debug")("natours-refined:server");
// let http = require("http");
// /**
//  * Get port from environment and store in Express.
//  */

// let port = normalizePort(process.env.PORT || "3000");
// app.set("port", port);

// /**
//  * Create HTTP server.
//  */

// let server = http.createServer(app);

// /**
//  * Listen on provided port, on all network interfaces.
//  */

// server.listen(port);
// server.on("error", onError);
// server.on("listening", onListening);

// const DB = process.env.DATABASE.replace(
// 	"<password>",
// 	process.env.DATABASE_PASSWORD
// );
// mongoose
// 	.connect(DB, {
// 		useNewUrlParser: true,
// 		// useCreateIndex: true,
// 		// useFindAndModify: false,
// 	})
// 	.then(() => console.log("DB connection successful!", process.env.NODE_ENV));

// /**
//  * Normalize a port into a number, string, or false.
//  */
// function normalizePort(val) {
// 	let port = parseInt(val, 10);

// 	if (isNaN(port)) {
// 		// named pipe
// 		return val;
// 	}

// 	if (port >= 0) {
// 		// port number
// 		return port;
// 	}

// 	return false;
// }

// /**
//  * Event listener for HTTP server "error" event.
//  */

// function onError(error) {
// 	if (error.syscall !== "listen") {
// 		throw error;
// 	}

// 	let bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

// 	// handle specific listen errors with friendly messages
// 	switch (error.code) {
// 		case "EACCES":
// 			console.error(bind + " requires elevated privileges");
// 			process.exit(1);
// 			break;
// 		case "EADDRINUSE":
// 			console.error(bind + " is already in use");
// 			process.exit(1);
// 			break;
// 		default:
// 			throw error;
// 	}
// }

// /**
//  * Event listener for HTTP server "listening" event.
//  */

// function onListening() {
// 	let addr = server.address();
// 	let bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
// 	debug("Listening on " + bind);
// }

// process.on("SIGTERM", () => {
// 	console.log("Received SIGTERM. Gracefully shutting down.");
// 	server.close(() => {
// 		console.log("Closed out remaining connections.");
// 		process.exit(0);
// 	});
// });


// #!/usr/bin/env node

const dotenv = require("dotenv");
dotenv.config({ path: "./config.env" });

const mongoose = require("mongoose");
const app = require("./app"); // Express app

const DB = process.env.DATABASE.replace(
  "<password>",
  process.env.DATABASE_PASSWORD
);

mongoose
  .connect(DB, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("DB connection successful!"));

// Vercel requires you to export a handler function
module.exports = app;
